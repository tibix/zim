Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-08-21T00:04:42+03:00

====== Git - Useful Comands ======
Created Sunday 21 August 2016

**git help** <command> - get help on <command> -- Ex: git help config; git help pull ...
**git config** - allows you to edit/view configurations
		-- global - use global config file
		-- system - use system config file
		-- local - use repository config file
		-- blob <blob_id> - read config file from given blob object
		-f, --file <file> - use a specific config file

Setting user name and e-mail
	**git config** --global user.name "User Name"
	**git config** --global user.email user@email.domain

View config:
 - global: **git config --global -l**
 	MacBook-Pro => tibix ~/Sites/___projects/eol $  git config --global -l
	user.email=tiberiu.purcel@gmail.com
	user.name=Tiberiu Dascal
	filter.media.required=true
	filter.media.clean=git media clean %f
	filter.media.smudge=git media smudge %f
	color.ui=true
	alias.lol=log --oneline --graph --decorate
 - system: **git config --system -l**
 	core.excludesfile=~/.gitignore
	core.legacyheaders=false
	core.quotepath=false
	core.pager=less -r
	mergetool.keepbackup=true
	push.default=simple
	color.ui=true
	color.interactive=auto
	repack.usedeltabaseoffset=true
	alias.s=status
	alias.a=!git add . && git status
	alias.au=!git add -u . && git status
	alias.aa=!git add . && git add -u . && git status
	alias.c=commit
	alias.cm=commit -m
	alias.ca=commit --amend
	alias.ac=!git add . && git commit
	alias.acm=!git add . && git commit -m
	alias.l=log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
	alias.ll=log --stat --abbrev-commit
	alias.lg=log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	alias.llg=log --color --graph --pretty=format:'%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an <%ae>%Creset %C(bold green)%cr (%ci)' --abbrev-commit
	alias.d=diff
	alias.master=checkout master
	alias.spull=svn rebase
	alias.spush=svn dcommit
	alias.alias=!git config --list | grep 'alias\.' | sed 's/alias\.\([^=]*\)=\(.*\)/\1\	 => \2/' | sort
	include.path=~/.gitcinclude
	include.path=.githubconfig
	include.path=.gitcredential
	diff.exif.textconv=exif
	credential.helper=osxkeychain
 - local (for specific repository, you need to run this command from a valid repo location): git config --local -l
 	MacBook-Pro => tibix ~/Sites/___projects/eol $  git config --local -l
 	core.repositoryformatversion=0
	core.filemode=true
	core.bare=false
	core.logallrefupdates=true
	core.ignorecase=true
	core.precomposeunicode=true
	remote.origin.url=https://github.com/tibix/eol.git
	remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*

**git init** - create a local repo;
**git status** - check changes since the last commit (if any);
**git add** - add files to the staging area;
	git add <file1> <file2> ... <filen> - add files to staging area;
	git add --all - adds all the files in the current directory;
	git add *.txt - adds all the files with .txt extension;
	git add docs/*txt - adds all the files with .txt extension in docs/ folder;
	git add docs/ - adds all the files in docs/ folder
	git add "*.txt" - adds all .txt fils in the entire project
**git commit -m "<message>"** -  commits the changes made and adds a log message from the user;
**git log** - shows a history of commits (use present instead of past: Ex: adding vs added);
	git log --pretty=oneline
	git log --pretty=format "%h %ad- %s [%an]" - where:
		%ad = author date
		%an = author name
		%h = SHA hash
		%s = subject
		%d = ref name
	git log --oneline -p (patch) - show log for each change mede to the project;
	git log --oneline --stat - statistics about how many deletion and insertion were made for each file, in each commits;
	git log --oneline --graph - ASCI graphical representation of the commits history;
	git log --until=1.minute.ago - pull log by imposing time constraints;
			--since=1.day.ago
			--since=1.hour.ago
			--since=1.month.ago --until=2.weeks.ago (relative times)
			--since=2016-01-01 --until=2016-12-31 (absolute times)
**git diff** - shows unstaged differences since the last commit;
	git diff HEAD - show differences between last commit and current state;
	git diff HEAD^ - parent of the latest commit;
	git diff HEAD^^ - grandparent of the latest commit;
	git diff HEAD~5 - 5 commits ago;
	git diff HEAD^..HEAD - second most recent vs. most recent;
	git diff SHA1..SHA2 - differences between commits, referenced by SHA (abreviated SHAs can also be used);
	git diff master bird - differences between branches;
	git diff --since=1.week.ago --until=1.minute.ago - differences between commits with time constraints;
git diff --staged - shows staged differences since last commit;
**git reset HEAD** <file> - unstage <file> so it will not counted in the commit - HEAD reffers to the last commit on the current brench;
**git checkout** -- <file> - will erase all changes for <file> since last commit;
**git commit -a -m** "<commit_mesage>" - adds all tracked files to the stage and commit them, but will not add untracked files;
**git reset --soft HEAD^** - reset last commit into staging; ^ stands for the last commit. If we want to go back to 5 commits we can specify HEAD^^^^^ or HEAD^5;
**git commit --amend -m** "<commit message>" - adds staged file(s) to the last commit and adds a new commit message;
**git reset --hard HEAD^** - undo all changes and the last (^) commit;
**git remote add** <remote_name(most used: origin)> <URL address to remote> - adds a remote location for local repository; comits can be pushed to remote;
**git remote -v** - shows the remote repositories;
	git remote show <remote_name> (ex: origin) - shows: remote branches, local branches configured for pull and local refs configured for push and their status;
**git push -u origin** <remote_branch> - pushes local repository to a remote in <remote_branch> branch (master can be used); -u switch is caching the name of the branch for a later use;
**git pull** - pull changes down from the remote;
**git remote rm** <remote_name>- removes a remote;
**git clone** <url> <dir_name (optional)>- downloads the content from the remote, adds the url into origin and checks out initial branch;
**git branch** <branch_name> - creates a branch with the given name;
	git branch -r - show remote branches;
**gir checkout** <branch_name> - move to <branch_name>;
**git merge** <branch_name> - will merge the master branch with <branch_name>;
git checkout -b <branch_name> - combines git branch and git checkout in a single command; will create the branch <branch_name> and checkout into it;
git push origin :<remote_branch> - deletes only the remote branch, local branch will remain untouched;
git branch -d <local_branch> - deletes only the <local_branch> if there are no commits to be made;
git branch -D <local_branch> - force deletes the <local_branch> even if there are commits peding;
**git remote prune** origin - cleans up deleted remote branches;
**git tag** - lists tags (mostly used for versioning);
git tag -a tagname -m "Description" - add a tag and a description for the tag;
git push --tags - pushes the tags to remote;
**git rebase** (after a fetch - since fetch does not auto-merge):
	1. Moves all changes to master which are not in origin/master to temp area;
	2. Runs all origin/master comits one at a time;
	3. Runs all the comits on the temp area, one at a time, on master;
**git blame** <file_name> --date short - see the author(s) and the time/date of the changes made on <file_name>;
**git rm** <file_name> - removes a file from the local filesystem & untrack it;
**git rm --cached** <file_name> - will not track the file anymore, but will not remove it from the local filesystem;

Excluding files:
.git/info/exclude/ - add the folder name to this location to be excluded from the project;
.gitignore - add files/folders to this file so they will be ignored from the project;
	- you need to add it to the project and commit it;
